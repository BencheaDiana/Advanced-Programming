import javafx.application.Application;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.paint.Color;
import javafx.stage.Stage;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class DotsConnectionGame extends Application {

    private Canvas canvas;
    private GraphicsContext gc;
    private List<Point> dots = new ArrayList<>();
    private List<Line> lines = new ArrayList<>();
    private int numDots = 10;
    private boolean isPlayer1Turn = true;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        BorderPane root = new BorderPane();
        
        HBox configPanel = new HBox(10);
        configPanel.setPadding(new Insets(10, 10, 10, 10));
        configPanel.setAlignment(Pos.CENTER);
        
        Label numDotsLabel = new Label("Number of dots:");
        TextField numDotsField = new TextField(String.valueOf(numDots));
        numDotsField.setPrefWidth(50);
        
        Button newGameButton = new Button("New Game");
        newGameButton.setOnAction(e -> {
            try {
                numDots = Integer.parseInt(numDotsField.getText());
                generateDots();
                lines.clear();
                drawBoard();
            } catch (NumberFormatException ex) {
                numDotsField.setText(String.valueOf(numDots));
            }
        });
        
        configPanel.getChildren().addAll(numDotsLabel, numDotsField, newGameButton);
        
        canvas = new Canvas(600, 400);
        gc = canvas.getGraphicsContext2D();
        generateDots();
        drawBoard();
        
        canvas.setOnMouseClicked(e -> {
            double x = e.getX();
            double y = e.getY();
            Point clickedDot = findNearestDot(x, y);
        });
        
        HBox controlPanel = new HBox(10);
        controlPanel.setPadding(new Insets(10, 10, 10, 10));
        controlPanel.setAlignment(Pos.CENTER);
        
        Button loadButton = new Button("Load");
        Button saveButton = new Button("Save");
        Button exitButton = new Button("Exit");
        
        exitButton.setOnAction(e -> primaryStage.close());
        
        controlPanel.getChildren().addAll(loadButton, saveButton, exitButton);
        
        root.setTop(configPanel);
        root.setCenter(canvas);
        root.setBottom(controlPanel);
        
        Scene scene = new Scene(root, 800, 600);
        primaryStage.setTitle("Dots and Lines Game");
        primaryStage.setScene(scene);
        primaryStage.show();
    }
    
    private void generateDots() {
        dots.clear();
        Random random = new Random();
        
        for (int i = 0; i < numDots; i++) {
            double x = 50 + random.nextDouble() * (canvas.getWidth() - 100);
            double y = 50 + random.nextDouble() * (canvas.getHeight() - 100);
            dots.add(new Point(x, y));
        }
    }
    
    private void drawBoard() {
        gc.clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
        
        for (Line line : lines) {
            gc.setStroke(line.isPlayer1 ? Color.BLUE : Color.RED);
            gc.setLineWidth(2);
            gc.strokeLine(line.start.x, line.start.y, line.end.x, line.end.y);
        }
        
        gc.setFill(Color.BLACK);
        for (Point dot : dots) {
            gc.fillOval(dot.x - 5, dot.y - 5, 10, 10);
        }
    }
    
    private Point findNearestDot(double x, double y) {
        Point nearest = null;
        double minDistance = Double.MAX_VALUE;
        
        for (Point dot : dots) {
            double distance = Math.sqrt(Math.pow(dot.x - x, 2) + Math.pow(dot.y - y, 2));
            if (distance < minDistance && distance < 20) {
                minDistance = distance;
                nearest = dot;
            }
        }
        
        return nearest;
    }
    
    private class Point {
        double x, y;
        
        Point(double x, double y) {
            this.x = x;
            this.y = y;
        }
    }
    
    private class Line {
        Point start, end;
        boolean isPlayer1;
        
        Line(Point start, Point end, boolean isPlayer1) {
            this.start = start;
            this.end = end;
            this.isPlayer1 = isPlayer1;
        }
        
        double length() {
            return Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        }
    }
}
